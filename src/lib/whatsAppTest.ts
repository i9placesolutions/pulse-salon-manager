/**
 * Arquivo para testes de integra√ß√£o com WhatsApp
 * Fun√ß√£o espec√≠fica para testar envio de mensagens
 */

import { whatsAppService } from './whatsappApi';
import { sendBulkMessage } from './uazapiService';

// Token espec√≠fico da inst√¢ncia em produ√ß√£o
export const PRODUCTION_INSTANCE_TOKEN = '64c79c76-4f4d-4fb8-9a00-8160be3089ae';

/**
 * Envia mensagem de teste para verificar conex√£o com a inst√¢ncia
 * @param number N√∫mero para enviar a mensagem
 * @returns Resultado do envio
 */
export async function sendTestMessage(number: string): Promise<any> {
  try {
    console.log(`Enviando mensagem de teste para ${number} usando o token: ${PRODUCTION_INSTANCE_TOKEN}`);
    
    // Formata√ß√£o do n√∫mero para padr√£o internacional
    let formattedNumber = number.replace(/\D/g, '');
    if (formattedNumber.length === 11) {
      formattedNumber = `55${formattedNumber}`;
    } else if (formattedNumber.length === 10) {
      formattedNumber = `55${formattedNumber}`;
    }
    
    // Mensagem para testar a integra√ß√£o
    const message = "üîî TESTE DE INTEGRA√á√ÉO UAZAPI\n\n"
      + "Teste de conex√£o com sistema de automa√ß√£o do Pulse Salon.\n\n"
      + "‚úÖ Mensagem enviada com sucesso.\n\n"
      + `‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\n`
      + `üì± N√∫mero: ${formattedNumber}`;
      
    // Enviar usando fun√ß√£o de envio em massa (mesmo que seja para apenas um n√∫mero)
    const result = await sendBulkMessage(
      [formattedNumber],
      message,
      0, // sem delay
      0, // sem delay m√°ximo
      PRODUCTION_INSTANCE_TOKEN // token espec√≠fico
    );
    
    console.log('Resultado do envio:', result);
    return {
      success: result.success,
      message: 'Mensagem de teste enviada com sucesso',
      details: result
    };
  } catch (error) {
    console.error('Erro ao enviar mensagem de teste:', error);
    return {
      success: false,
      message: `Erro ao enviar mensagem: ${(error as Error).message}`,
      error
    };
  }
}

/**
 * Verifica o status da inst√¢ncia espec√≠fica
 * @returns Dados da inst√¢ncia
 */
export async function checkInstanceStatus(): Promise<any> {
  try {
    // Verificar diretamente a inst√¢ncia pelo token espec√≠fico
    const instance = await whatsAppService.getInstanceStatus(PRODUCTION_INSTANCE_TOKEN);
    
    console.log('Status da inst√¢ncia:', instance);
    
    return {
      success: true,
      status: instance.status || instance.state,
      instanceData: instance
    };
  } catch (error) {
    console.error('Erro ao verificar status da inst√¢ncia:', error);
    return {
      success: false,
      message: `Erro ao verificar status: ${(error as Error).message}`,
      error
    };
  }
}
