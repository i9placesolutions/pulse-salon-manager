import { useState, useEffect, Suspense, lazy } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Download, FileText, Calendar, Users, UserCheck, Package,
  TrendingUp, Star, Clock, Activity, Scissors, ShoppingBag,
  AlertTriangle, Filter, Eye, Settings, FileDown, FileSpreadsheet,
  BarChart3, FileBarChart, BookOpen, Save, Heart, History, Mail,
  Share, Copy, Sun, Moon, Target, Bell, ChevronDown, Image, Send
} from "lucide-react";
import { formatCurrency } from "@/utils/currency";
import { RevenueChart } from "@/components/financeiro/RevenueChart";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  LineChart,
  Line,
  AreaChart,
  Area
} from "recharts";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import { format, startOfMonth, endOfMonth, subMonths, sub, subDays } from "date-fns";
import { ptBR } from "date-fns/locale";
import { toast } from "@/components/ui/use-toast";
import { ReportBuilder } from "@/components/relatorios/ReportBuilder";

// Dados mockados para demonstração
const salesData = [
  { date: "01/03", revenue: 3200, expenses: 1800, services: 28, clients: 22 },
  { date: "02/03", revenue: 2800, expenses: 1600, services: 24, clients: 20 },
  { date: "03/03", revenue: 3600, expenses: 2000, services: 32, clients: 25 },
  { date: "04/03", revenue: 4200, expenses: 2200, services: 38, clients: 30 },
  { date: "05/03", revenue: 3800, expenses: 1900, services: 34, clients: 28 },
  { date: "06/03", revenue: 4500, expenses: 2400, services: 40, clients: 32 },
  { date: "07/03", revenue: 5000, expenses: 2600, services: 45, clients: 36 },
];

const metrics = [
  {
    title: "Faturamento do Mês",
    value: formatCurrency(27100),
    change: 12.5,
    icon: FileText,
    description: "vs. mês anterior"
  },
  {
    title: "Atendimentos",
    value: "241",
    change: 8.2,
    icon: Calendar,
    description: "neste mês"
  },
  {
    title: "Clientes Atendidos",
    value: "193",
    change: 5.3,
    icon: Users,
    description: "clientes únicos"
  },
  {
    title: "Novos Clientes",
    value: "28",
    change: -2.1,
    icon: UserCheck,
    description: "este mês"
  },
];

// Dados para relatório de atendimentos
const appointmentsData = {
  occupationRate: [
    { professional: "Ana Silva", rate: 85 },
    { professional: "João Santos", rate: 75 },
    { professional: "Maria Oliveira", rate: 90 },
  ],
  servicesDuration: [
    { service: "Corte Feminino", avgDuration: 45 },
    { service: "Coloração", avgDuration: 120 },
    { service: "Manicure", avgDuration: 60 },
  ],
  hourlyDistribution: Array.from({ length: 12 }, (_, i) => ({
    hour: `${i + 8}:00`,
    appointments: Math.floor(Math.random() * 8) + 1,
  })),
};

// Dados para relatório de clientes
const clientsData = {
  visitFrequency: [
    { frequency: "Semanal", clients: 45 },
    { frequency: "Quinzenal", clients: 78 },
    { frequency: "Mensal", clients: 125 },
    { frequency: "Ocasional", clients: 89 },
  ],
  topServices: [
    { name: "Corte Feminino", count: 156 },
    { name: "Coloração", count: 98 },
    { name: "Manicure", count: 87 },
    { name: "Corte Masculino", count: 76 },
  ],
  retention: Array.from({ length: 6 }, (_, i) => ({
    month: format(subDays(new Date(), i * 30), "MMM", { locale: ptBR }),
    rate: 70 + Math.floor(Math.random() * 20),
  })),
};

// Dados para relatório de profissionais
const professionalsData = {
  performance: [
    { name: "Ana Silva", revenue: 8500, clients: 85, rating: 4.8 },
    { name: "João Santos", revenue: 7200, clients: 72, rating: 4.6 },
    { name: "Maria Oliveira", revenue: 9100, clients: 91, rating: 4.9 },
  ],
  serviceDistribution: [
    { professional: "Ana Silva", services: [
      { name: "Corte", count: 45 },
      { name: "Coloração", count: 28 },
      { name: "Hidratação", count: 15 },
    ]},
    { professional: "João Santos", services: [
      { name: "Corte", count: 52 },
      { name: "Barba", count: 38 },
      { name: "Hidratação", count: 12 },
    ]},
  ],
};

// Dados para relatório de estoque
const stockData = {
  topProducts: [
    { name: "Shampoo Pro", sold: 45, revenue: 2250 },
    { name: "Condicionador Pro", sold: 38, revenue: 1900 },
    { name: "Máscara Capilar", sold: 32, revenue: 1600 },
  ],
  lowStock: [
    { name: "Shampoo Pro", current: 5, minimum: 10 },
    { name: "Tintura #7", current: 3, minimum: 8 },
    { name: "Óleo Capilar", current: 4, minimum: 12 },
  ],
  stockTurnover: Array.from({ length: 6 }, (_, i) => ({
    month: format(subDays(new Date(), i * 30), "MMM", { locale: ptBR }),
    turnover: 2 + Math.random(),
  })),
};

const CHART_COLORS = ["#dc8c95", "#8b5cf6", "#22c55e", "#eab308"];

// Interfaces para as novas funcionalidades
interface ReportTemplate {
  id: string;
  name: string;
  description: string;
  options: any;
  createdAt: Date;
  isDefault?: boolean;
}

interface ReportHistory {
  id: string;
  name: string;
  type: string;
  generatedAt: Date;
  options: any;
  data?: any;
}

interface BasePeriod {
  start: string;
  end: string;
  label: string;
}

interface ComparisonOptions {
  basePeriod: BasePeriod;
  comparisonPeriod: BasePeriod;
  sections: {
    financeiro: boolean;
    atendimentos: boolean;
    clientes: boolean;
    produtos: boolean;
  };
  displayType: string;
}

interface GoalSettings {
  id: string;
  name: string;
  target: number;
  current: number;
  unit: string;
  period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly';
}

interface SelectedReportsType {
  financeiro: boolean;
  atendimentos: boolean;
  clientes: boolean;
  profissionais: boolean;
  estoque: boolean;
}

interface SelectedViewsType {
  financeiro: boolean;
  atendimentos: boolean;
  clientes: boolean;
  profissionais: boolean;
  estoque: boolean;
}

export default function Relatorios() {
  const [period, setPeriod] = useState<'month' | 'week' | 'year'>("month");
  const [showExportModal, setShowExportModal] = useState(false);
  const [exportFormat, setExportFormat] = useState("pdf");
  const [viewMode, setViewMode] = useState<"dashboard" | "builder">("dashboard");
  const [isLoading, setIsLoading] = useState(false);
  const [customReportData, setCustomReportData] = useState<any>(null);
  const [customReportOptions, setCustomReportOptions] = useState<any>(null);
  
  // Estados para novas funcionalidades
  const [templates, setTemplates] = useState<ReportTemplate[]>([]);
  const [favorites, setFavorites] = useState<string[]>([]);
  const [history, setHistory] = useState<ReportHistory[]>([]);
  const [chartTheme, setChartTheme] = useState({
    primary: "#2563eb",
    secondary: "#16a34a",
    tertiary: "#d97706",
    quaternary: "#dc2626",
  });
  const [darkMode, setDarkMode] = useState(false); // Mantendo o estado, mas não será utilizado
  
  // Estados adicionais que estavam ausentes
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [showGoalsModal, setShowGoalsModal] = useState(false);
  const [compareMode, setCompareMode] = useState(false);
  const [goals, setGoals] = useState<GoalSettings[]>([]);
  const [templateName, setTemplateName] = useState("");
  const [templateDescription, setTemplateDescription] = useState("");
  const [previewMode, setPreviewMode] = useState(false);
  const [previewData, setPreviewData] = useState<any>(null);
  const [scheduledReports, setScheduledReports] = useState<any[]>([]);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [scheduleOptions, setScheduleOptions] = useState({
    frequency: "weekly",
    day: "1",
    time: "08:00",
    recipients: "",
    format: "pdf"
  });
  const [showComparisonModal, setShowComparisonModal] = useState(false);
  const [comparisonOptions, setComparisonOptions] = useState<ComparisonOptions>({
    basePeriod: {
      start: format(sub(new Date(), { days: 30 }), "yyyy-MM-dd"),
      end: format(new Date(), "yyyy-MM-dd"),
      label: "Período Atual"
    },
    comparisonPeriod: {
      start: format(sub(new Date(), { days: 60 }), "yyyy-MM-dd"),
      end: format(sub(new Date(), { days: 31 }), "yyyy-MM-dd"),
      label: "Mês Anterior"
    },
    sections: {
      financeiro: true,
      atendimentos: true,
      clientes: true,
      produtos: true
    },
    displayType: "side-by-side"
  });
  const [showShareModal, setShowShareModal] = useState(false);
  const [cachedReports, setCachedReports] = useState<Record<string, {data: any, timestamp: number}>>({});
  const [showThemeModal, setShowThemeModal] = useState(false);
  
  // Estados para controle de filtros e seleções
  const [selectedViews, setSelectedViews] = useState<SelectedViewsType>({
    financeiro: true,
    atendimentos: true,
    clientes: true,
    profissionais: true,
    estoque: true
  });
  const [selectedFilters, setSelectedFilters] = useState<{
    profissionais: string[];
    servicos: string[];
    categorias: string[];
    dataInicio?: string;
    dataFim?: string;
  }>({
    profissionais: [],
    servicos: [],
    categorias: []
  });
  const [selectedReports, setSelectedReports] = useState<SelectedReportsType>({
    financeiro: true,
    atendimentos: true,
    clientes: true,
    profissionais: true,
    estoque: true
  });
  
  // Estado para controlar a visualização (relatórios predefinidos ou personalizados)
  
  // Estado para armazenar os dados do relatório personalizado gerado
  
  // Função para renderizar conteúdo personalizado com base no tipo de relatório
  const renderCustomReportContent = (data: any, options: any) => {
    if (!data) return null;
    
    switch(options.type) {
      case "financeiro":
        if (options.subtype === "receitas") {
          return (
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={data}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="revenue" fill="#22c55e" name="Receitas" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          );
        } else if (options.subtype === "despesas") {
          return (
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={data}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="expenses" fill="#ef4444" name="Despesas" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          );
        } else {
          return (
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={data}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="revenue" fill="#22c55e" name="Receitas" />
                  <Bar dataKey="expenses" fill="#ef4444" name="Despesas" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          );
        }
        break;
        
      case "atendimentos":
        if (options.subtype === "cancelados" && data.cancelados) {
          return (
            <div>
              <h3 className="text-lg font-medium mb-4">Atendimentos Cancelados</h3>
              <div className="relative overflow-x-auto">
                <table className="w-full text-sm text-left">
                  <thead className="text-xs uppercase bg-gray-100">
                    <tr>
                      <th className="px-4 py-2">Data</th>
                      <th className="px-4 py-2">Profissional</th>
                      <th className="px-4 py-2">Cliente</th>
                      <th className="px-4 py-2">Motivo</th>
                    </tr>
                  </thead>
                  <tbody>
                    {data.cancelados.map((item: any, index: number) => (
                      <tr key={index} className="bg-white border-b">
                        <td className="px-4 py-2">{item.data}</td>
                        <td className="px-4 py-2">{item.profissional}</td>
                        <td className="px-4 py-2">{item.cliente}</td>
                        <td className="px-4 py-2">{item.motivo}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          );
        } else {
          return (
            <div className="grid gap-4 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle>Taxa de Ocupação</CardTitle>
                </CardHeader>
                <CardContent className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={data.occupationRate}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="professional" />
                      <YAxis unit="%" />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="rate" fill="#dc8c95" name="Taxa de Ocupação" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>Duração Média dos Serviços</CardTitle>
                </CardHeader>
                <CardContent className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={data.servicesDuration}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="service" />
                      <YAxis unit="min" />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="avgDuration" fill="#8b5cf6" name="Duração Média" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>
          );
        }
        
      case "profissionais":
        return (
          <div className="grid gap-4 md:grid-cols-2">
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Performance dos Profissionais</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-8">
                  {data.performance.map((prof: any) => (
                    <div key={prof.name} className="space-y-2">
                      <div className="flex items-center justify-between">
                        <h3 className="font-medium">{prof.name}</h3>
                        <div className="flex items-center gap-4">
                          <span className="flex items-center gap-1">
                            <TrendingUp className="h-4 w-4 text-green-500" />
                            {formatCurrency(prof.revenue)}
                          </span>
                          <span className="flex items-center gap-1">
                            <Users className="h-4 w-4 text-blue-500" />
                            {prof.clients} clientes
                          </span>
                          <span className="flex items-center gap-1">
                            <Star className="h-4 w-4 text-yellow-500" />
                            {prof.rating}
                          </span>
                        </div>
                      </div>
                      <div className="h-2 bg-secondary rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-primary" 
                          style={{ width: `${(prof.clients / 100) * 100}%` }}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        );
        break;
        
      case "estoque":
        if (options.subtype === "estoqueBaixo") {
          return (
            <Card>
              <CardHeader>
                <CardTitle>Alertas de Estoque</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {data.lowStock.map((item: any, index: number) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4 text-yellow-500" />
                        <span>{item.name}</span>
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {item.current}/{item.minimum} unidades
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          );
        } else {
          return (
            <div className="grid gap-4 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle>Produtos Mais Vendidos</CardTitle>
                </CardHeader>
                <CardContent className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={data.topProducts}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis yAxisId="left" orientation="left" />
                      <Tooltip />
                      <Legend />
                      <Bar yAxisId="left" dataKey="sold" fill="#dc8c95" name="Unidades Vendidas" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>
          );
        }
        break;
        
      default:
        return <p>Selecione as opções desejadas para gerar um relatório personalizado.</p>;
    }
  };

  // Função para gerar relatório personalizado com base nas opções selecionadas
  const handleGenerateReport = (options: any) => {
    console.log("Gerando relatório com as opções:", options);
    setCustomReportOptions(options);
    
    // Simulando geração de dados baseados nas seleções do usuário
    let reportData;
    
    switch(options.type) {
      case "financeiro":
        if (options.subtype === "receitas") {
          reportData = salesData.map(item => ({
            date: item.date,
            revenue: item.revenue,
          }));
        } else if (options.subtype === "despesas") {
          reportData = salesData.map(item => ({
            date: item.date,
            expenses: item.expenses,
          }));
        } else {
          reportData = salesData;
        }
        break;
        
      case "atendimentos":
        if (options.subtype === "cancelados") {
          reportData = {
            ...appointmentsData,
            cancelados: [
              { data: "01/03", profissional: "Ana Silva", cliente: "Carlos Oliveira", motivo: "Cliente desmarcou" },
              { data: "03/03", profissional: "João Santos", cliente: "Maria Santos", motivo: "Profissional ausente" },
              { data: "05/03", profissional: "Maria Oliveira", cliente: "Pedro Souza", motivo: "Cliente não compareceu" },
            ]
          };
        } else {
          reportData = appointmentsData;
        }
        break;
        
      case "clientes":
        reportData = clientsData;
        break;
        
      case "profissionais":
        if (options.filters.profissionais.length > 0) {
          // Filtrando para mostrar apenas profissionais selecionados
          reportData = {
            performance: professionalsData.performance.filter(prof => 
              options.filters.profissionais.includes(prof.name === "Ana Silva" ? "1" : 
                                                  prof.name === "João Santos" ? "2" : "3")),
            serviceDistribution: professionalsData.serviceDistribution.filter(prof => 
              options.filters.profissionais.includes(prof.professional === "Ana Silva" ? "1" : "2"))
          };
        } else {
          reportData = professionalsData;
        }
        break;
        
      case "estoque":
        if (options.subtype === "estoqueBaixo") {
          reportData = { lowStock: stockData.lowStock };
        } else {
          reportData = stockData;
        }
        break;
        
      default:
        reportData = {};
    }
    
    setCustomReportData(reportData);
  };

  // --- Funções para novas funcionalidades ---
  // 1. Funções para Templates e Favoritos
  const saveAsTemplate = () => {
    const newTemplate: ReportTemplate = {
      id: `template-${Date.now()}`,
      name: templateName || `Template ${templates.length + 1}`,
      description: templateDescription || `Criado em ${format(new Date(), "dd/MM/yyyy")}`,
      options: viewMode === "dashboard" 
        ? { type: "dashboard", period, filters: selectedFilters } 
        : { ...customReportOptions },
      createdAt: new Date()
    };
    
    setTemplates([...templates, newTemplate]);
    setShowTemplateModal(false);
    setTemplateName("");
    setTemplateDescription("");
    
    toast({
      title: "Template salvo com sucesso",
      description: "Você pode acessá-lo a qualquer momento na lista de templates",
    });
  };

  const loadTemplate = (template: ReportTemplate) => {
    if (template.options.type === "dashboard") {
      setViewMode("dashboard");
      setPeriod(template.options.period);
      setSelectedFilters(template.options.filters);
    } else {
      setViewMode("builder");
      setCustomReportOptions(template.options);
      generateCustomReport(template.options);
    }
    
    toast({
      title: "Template carregado",
      description: `O template "${template.name}" foi carregado com sucesso`,
    });
  };

  const toggleFavorite = (templateId: string) => {
    if (favorites.includes(templateId)) {
      setFavorites(favorites.filter(id => id !== templateId));
    } else {
      setFavorites([...favorites, templateId]);
    }
  };

  const deleteTemplate = (templateId: string) => {
    setTemplates(templates.filter(template => template.id !== templateId));
    setFavorites(favorites.filter(id => id !== templateId));
    
    toast({
      title: "Template excluído",
      description: "O template foi removido com sucesso",
    });
  };

  // 2. Funções para histórico de relatórios
  const addToHistory = (reportData: any, reportOptions: any) => {
    const historyItem: ReportHistory = {
      id: `history-${Date.now()}`,
      name: `Relatório ${reportOptions.type} - ${format(new Date(), "dd/MM/yyyy HH:mm")}`,
      type: reportOptions.type,
      generatedAt: new Date(),
      options: reportOptions,
      data: reportData
    };
    
    // Mantém apenas os últimos 20 relatórios no histórico
    const updatedHistory = [historyItem, ...history].slice(0, 20);
    setHistory(updatedHistory);
  };

  const loadFromHistory = (historyItem: ReportHistory) => {
    if (historyItem.options.type === "dashboard") {
      setViewMode("dashboard");
      setPeriod(historyItem.options.period);
      setSelectedFilters(historyItem.options.filters);
    } else {
      setViewMode("builder");
      setCustomReportOptions(historyItem.options);
      setCustomReportData(historyItem.data);
    }
  };

  // 3. Funções para tema
  const updateChartTheme = (newTheme: any) => {
    setChartTheme({
      ...chartTheme,
      ...newTheme
    });
    
    // Salvar tema no localStorage
    localStorage.setItem('reportChartTheme', JSON.stringify({
      ...chartTheme,
      ...newTheme
    }));
  };

  // 4. Funções para comparações e metas
  const enableComparison = () => {
    const today = new Date();
    const previousPeriod = {
      start: format(sub(new Date(selectedFilters.dataInicio || ''), { months: 1 }), "yyyy-MM-dd"),
      end: format(sub(new Date(selectedFilters.dataFim || ''), { months: 1 }), "yyyy-MM-dd"),
      label: "Mês Anterior"
    };
    
    setCompareMode(true);
    setComparisonOptions({
      ...comparisonOptions,
      basePeriod: previousPeriod
    });
  };

  const disableComparison = () => {
    setCompareMode(false);
    setComparisonOptions({
      ...comparisonOptions,
      basePeriod: {
        start: format(sub(new Date(), { days: 30 }), "yyyy-MM-dd"),
        end: format(new Date(), "yyyy-MM-dd"),
        label: "Período Atual"
      }
    });
  };

  const saveGoal = (goal: any) => {
    // Criar nova meta ou atualizar existente
    if (goal.id) {
      // Atualizar meta existente
      const updatedGoals = goals.map(g => 
        g.id === goal.id ? {
          ...g,
          ...goal,
          period: goal.period as "daily" | "weekly" | "monthly" | "quarterly" | "yearly"
        } : g
      );
      setGoals(updatedGoals);
    } else {
      // Criar nova meta com tipagem corrigida
      const newGoal: GoalSettings = {
        id: Date.now().toString(),
        name: goal.name,
        target: goal.target,
        current: goal.current || 0,
        unit: goal.unit,
        period: goal.period as "daily" | "weekly" | "monthly" | "quarterly" | "yearly"
      };
      setGoals([...goals, newGoal]);
    }
    
    // Fechar modal
    setShowGoalsModal(false);
  };

  const removeGoal = (goalId: string) => {
    setGoals(goals.filter(g => g.id !== goalId));
  };

  // 5. Funções para exportação e agendamento
  const exportReport = (format: string) => {
    setIsLoading(true);
    
    // Simulação de exportação
    setTimeout(() => {
      const message = `Relatório exportado em formato ${format.toUpperCase()}`;
      toast({
        title: "Exportação concluída",
        description: message
      });
      
      setIsLoading(false);
      setShowExportModal(false);
    }, 1500);
  };

  const scheduleReport = () => {
    // Simular agendamento de relatório
    const newSchedule = {
      id: Date.now().toString(),
      ...scheduleOptions,
      createdAt: new Date()
    };
    
    setScheduledReports([...scheduledReports, newSchedule]);
    setShowScheduleModal(false);
    
    toast({
      title: "Relatório agendado",
      description: `O relatório será gerado ${scheduleOptions.frequency === 'weekly' ? 'semanalmente' : 
                    scheduleOptions.frequency === 'monthly' ? 'mensalmente' : 
                    scheduleOptions.frequency === 'daily' ? 'diariamente' : 'uma vez'} às ${scheduleOptions.time}`
    });
  };

  const deleteSchedule = (scheduleId: string) => {
    setScheduledReports(scheduledReports.filter(s => s.id !== scheduleId));
    
    toast({
      title: "Agendamento removido",
      description: "O relatório não será mais enviado automaticamente",
    });
  };

  const shareReport = (method: "email" | "whatsapp" | "copy") => {
    switch (method) {
      case "email":
        // Lógica para compartilhar por email
        toast({
          title: "E-mail enviado",
          description: "O relatório foi enviado por e-mail com sucesso",
        });
        break;
      case "whatsapp":
        // Lógica para compartilhar por WhatsApp
        toast({
          title: "Link gerado para WhatsApp",
          description: "Compartilhe o relatório via WhatsApp",
        });
        break;
      case "copy":
        // Lógica para copiar link
        toast({
          title: "Link copiado",
          description: "O link para o relatório foi copiado para a área de transferência",
        });
        break;
    }
    
    setShowShareModal(false);
  };

  // 6. Funções para cache e melhoria de performance
  const getCachedReport = (options: any) => {
    const key = JSON.stringify(options);
    
    if (cachedReports && cachedReports[key] && 
        (Date.now() - cachedReports[key].timestamp) < 5 * 60 * 1000) {
      return cachedReports[key].data;
    }
    
    return null;
  };

  const setCachedReport = (options: any, data: any) => {
    const key = JSON.stringify(options);
    setCachedReports({
      ...cachedReports,
      [key]: {
        data,
        timestamp: Date.now()
      }
    });
  };

  const generateCustomReport = (options: any) => {
    setIsLoading(true);
    
    // Verificar se existe em cache
    const cachedData = getCachedReport(options);
    if (cachedData) {
      setCustomReportData(cachedData);
      setCustomReportOptions(options);
      setIsLoading(false);
      return;
    }
    
    // Simulação de geração de relatório
    setTimeout(() => {
      let reportData;
      
      switch (options.type) {
        case "financeiro":
          reportData = salesData;
          break;
        case "atendimentos":
          reportData = appointmentsData;
          break;
        case "clientes":
          reportData = clientsData;
          break;
        case "profissionais":
          reportData = professionalsData;
          break;
        case "estoque":
          reportData = stockData;
          break;
        default:
          reportData = salesData;
      }
      
      setCustomReportData(reportData);
      setCustomReportOptions(options);
      
      // Salvar no cache
      setCachedReport(options, reportData);
      
      // Adicionar ao histórico
      addToHistory(reportData, options);
      
      setIsLoading(false);
    }, 1500);
  };
  
  // 7. Função para pré-visualização de relatório
  const previewReport = () => {
    setPreviewMode(true);
    
    setTimeout(() => {
      const previewData = viewMode === "dashboard" 
        ? { salesData, appointmentsData, clientsData } 
        : customReportData;
      
      setPreviewData(previewData);
    }, 800);
  };
  
  const closePreview = () => {
    setPreviewMode(false);
    setPreviewData(null);
  };

  // Função para gerar prévia de relatórios (substituindo generatePreview)
  const generatePreview = () => {
    setIsLoading(true);
    
    setTimeout(() => {
      const previewData = viewMode === "dashboard" 
        ? { salesData, appointmentsData, clientsData } 
        : customReportData;
      
      setPreviewData(previewData);
      setPreviewMode(true);
      setIsLoading(false);
    }, 800);
  };

  // Função para comparação de relatórios
  const compareReports = () => {
    // Simulação de comparação de relatórios
    console.log("Comparando relatórios...");
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Relatórios</h1>
          <p className="text-muted-foreground">
            Analise dados detalhados sobre o desempenho do seu salão
          </p>
        </div>
        
        {/* Barra de ações superior com novas funcionalidades */}
        <div className="flex flex-wrap gap-2">
          {/* Botão Pré-visualizar */}
          <Button variant="outline" size="sm" onClick={previewReport} disabled={isLoading}>
            <Eye className="mr-2 h-4 w-4" />
            Pré-visualizar
          </Button>
          
          {/* Botão Salvar Template */}
          <Button variant="outline" size="sm" onClick={() => setShowTemplateModal(true)}>
            <Save className="mr-2 h-4 w-4" />
            Salvar Template
          </Button>
          
          {/* Botão Meus Templates */}
          <Button variant="outline" size="sm" onClick={() => setShowTemplateModal(true)}>
            <Copy className="mr-2 h-4 w-4" />
            Meus Templates
            <span className="ml-1 rounded-full bg-primary px-1.5 text-[10px] text-white">
              {templates.length}
            </span>
          </Button>
          
          {/* Botão Histórico */}
          <Button variant="outline" size="sm" onClick={() => setShowHistoryModal(true)}>
            <History className="mr-2 h-4 w-4" />
            Histórico
          </Button>
          
          {/* Botão Comparar */}
          <Button 
            variant={compareMode ? "default" : "outline"} 
            size="sm" 
            onClick={compareMode ? disableComparison : enableComparison}
          >
            <Activity className="mr-2 h-4 w-4" />
            {compareMode ? "Desativar Comparação" : "Comparar Períodos"}
          </Button>
          
          {/* Botão Metas */}
          <Button variant="outline" size="sm" onClick={() => setShowGoalsModal(true)}>
            <Target className="mr-2 h-4 w-4" />
            Metas
          </Button>
          
          {/* Botão Tema */}
          <Button variant="outline" size="sm" onClick={() => setShowThemeModal(true)}>
            <Settings className="mr-2 h-4 w-4" />
            Tema
          </Button>
          
          {/* Botão Exportar (já existente, atualizado) */}
          <Button onClick={() => setShowExportModal(true)}>
            <Download className="mr-2 h-4 w-4" />
            Exportar
          </Button>
        </div>
      </div>

      {/* Barra de acessos rápidos para templates e favoritos */}
      {templates.length > 0 && (
        <div className="overflow-x-auto pb-2">
          <div className="flex space-x-2">
            <p className="text-sm font-medium text-gray-500 flex items-center mr-2">
              Templates:
            </p>
            {templates.map(template => (
              <Button 
                key={template.id} 
                variant="outline" 
                size="sm" 
                className="flex items-center whitespace-nowrap"
                onClick={() => loadTemplate(template)}
              >
                {template.name}
                <Heart 
                  className={`ml-1 h-3 w-3 ${favorites.includes(template.id) ? 'fill-red-500 text-red-500' : 'text-gray-400'}`}
                  onClick={(e) => {
                    e.stopPropagation();
                    toggleFavorite(template.id);
                  }}
                />
              </Button>
            ))}
          </div>
        </div>
      )}

      {viewMode === "builder" ? (
        <div className="space-y-6">
          <ReportBuilder onGenerateReport={handleGenerateReport} />
          
          {customReportData && customReportOptions && (
            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <BookOpen className="h-5 w-5 text-primary" />
                  Relatório Personalizado: {{
                    financeiro: "Financeiro",
                    atendimentos: "Atendimentos",
                    clientes: "Clientes",
                    profissionais: "Profissionais",
                    estoque: "Estoque"
                  }[customReportOptions.type] || "Personalizado"}
                </CardTitle>
                <p className="text-sm text-muted-foreground">
                  Período: {format(new Date(customReportOptions.periodStart), "dd/MM/yyyy")} até {format(new Date(customReportOptions.periodEnd), "dd/MM/yyyy")}
                </p>
              </CardHeader>
              <CardContent>
                {renderCustomReportContent(customReportData, customReportOptions)}
              </CardContent>
            </Card>
          )}
        </div>
      ) : (
        <>
        {/* Métricas principais */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {metrics.map((metric, index) => (
          <Card key={index}>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">
                {metric.title}
              </CardTitle>
              <metric.icon className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{metric.value}</div>
              <p className="text-xs text-muted-foreground flex items-center mt-1">
                <span className={`mr-1 ${metric.change > 0 ? 'text-green-500' : 'text-red-500'}`}>
                  {metric.change > 0 ? '↑' : '↓'} {Math.abs(metric.change)}%
                </span>
                {metric.description}
              </p>
            </CardContent>
          </Card>
))}
        </div>
                </>
      )}

      <Dialog open={showExportModal} onOpenChange={setShowExportModal}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Exportar Relatório</DialogTitle>
            <DialogDescription>
              Selecione as opções de exportação e formato do relatório.
            </DialogDescription>
          </DialogHeader>
          
          <Tabs defaultValue="export" className="mt-4">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="export">Exportar</TabsTrigger>
              <TabsTrigger value="schedule">Agendar Envio</TabsTrigger>
              <TabsTrigger value="share">Compartilhar</TabsTrigger>
            </TabsList>
            
            <TabsContent value="export" className="space-y-4 mt-4">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="format">Formato de Exportação</Label>
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex items-center space-x-2">
                      <RadioGroup value={exportFormat} onValueChange={setExportFormat} className="flex flex-row gap-4">
                        <div className="flex items-center space-x-2">
                          <RadioGroupItem value="pdf" id="pdf" />
                          <Label htmlFor="pdf" className="flex items-center">
                            <FileText className="mr-2 h-4 w-4" />
                            PDF
                          </Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <RadioGroupItem value="excel" id="excel" />
                          <Label htmlFor="excel" className="flex items-center">
                            <FileSpreadsheet className="mr-2 h-4 w-4" />
                            Excel
                          </Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <RadioGroupItem value="csv" id="csv" />
                          <Label htmlFor="csv" className="flex items-center">
                            <FileDown className="mr-2 h-4 w-4" />
                            CSV
                          </Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <RadioGroupItem value="png" id="png" />
                          <Label htmlFor="png" className="flex items-center">
                            <Image className="mr-2 h-4 w-4" />
                            Imagem
                          </Label>
                        </div>
                      </RadioGroup>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label>Selecione os Relatórios</Label>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id="include-financeiro" 
                        checked={selectedReports.financeiro} 
                        onCheckedChange={(checked) => 
                          setSelectedReports({...selectedReports, financeiro: !!checked})
                        }
                      />
                      <Label htmlFor="include-financeiro">Financeiro</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id="include-atendimentos" 
                        checked={selectedReports.atendimentos} 
                        onCheckedChange={(checked) => 
                          setSelectedReports({...selectedReports, atendimentos: !!checked})
                        }
                      />
                      <Label htmlFor="include-atendimentos">Atendimentos</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id="include-clientes" 
                        checked={selectedReports.clientes} 
                        onCheckedChange={(checked) => 
                          setSelectedReports({...selectedReports, clientes: !!checked})
                        }
                      />
                      <Label htmlFor="include-clientes">Clientes</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id="include-profissionais" 
                        checked={selectedReports.profissionais} 
                        onCheckedChange={(checked) => 
                          setSelectedReports({...selectedReports, profissionais: !!checked})
                        }
                      />
                      <Label htmlFor="include-profissionais">Profissionais</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id="include-estoque" 
                        checked={selectedReports.estoque} 
                        onCheckedChange={(checked) => 
                          setSelectedReports({...selectedReports, estoque: !!checked})
                        }
                      />
                      <Label htmlFor="include-estoque">Estoque</Label>
                    </div>
                  </div>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setShowExportModal(false)}>
                  Cancelar
                </Button>
                <Button onClick={() => exportReport(exportFormat)}>
                  {isLoading ? "Processando..." : "Exportar"}
                </Button>
              </DialogFooter>
            </TabsContent>
            
            <TabsContent value="schedule" className="space-y-4 mt-4">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="schedule-frequency">Frequência</Label>
                  <Select 
                    value={scheduleOptions.frequency} 
                    onValueChange={(val) => setScheduleOptions({...scheduleOptions, frequency: val})}
                  >
                    <SelectTrigger id="schedule-frequency">
                      <SelectValue placeholder="Selecione a frequência" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="daily">Diário</SelectItem>
                      <SelectItem value="weekly">Semanal</SelectItem>
                      <SelectItem value="monthly">Mensal</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                {scheduleOptions.frequency === 'weekly' && (
                  <div className="space-y-2">
                    <Label htmlFor="schedule-day">Dia da Semana</Label>
                    <Select 
                      value={scheduleOptions.day} 
                      onValueChange={(val) => setScheduleOptions({...scheduleOptions, day: val})}
                    >
                      <SelectTrigger id="schedule-day">
                        <SelectValue placeholder="Selecione o dia" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">Segunda-feira</SelectItem>
                        <SelectItem value="2">Terça-feira</SelectItem>
                        <SelectItem value="3">Quarta-feira</SelectItem>
                        <SelectItem value="4">Quinta-feira</SelectItem>
                        <SelectItem value="5">Sexta-feira</SelectItem>
                        <SelectItem value="6">Sábado</SelectItem>
                        <SelectItem value="0">Domingo</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}
                
                {scheduleOptions.frequency === 'monthly' && (
                  <div className="space-y-2">
                    <Label htmlFor="schedule-day">Dia do Mês</Label>
                    <Select 
                      value={scheduleOptions.day} 
                      onValueChange={(val) => setScheduleOptions({...scheduleOptions, day: val})}
                    >
                      <SelectTrigger id="schedule-day">
                        <SelectValue placeholder="Selecione o dia" />
                      </SelectTrigger>
                      <SelectContent>
                        {Array.from({length: 31}, (_, i) => (
                          <SelectItem key={i} value={String(i + 1)}>
                            Dia {i + 1}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                )}
                
                <div className="space-y-2">
                  <Label htmlFor="schedule-time">Horário</Label>
                  <Input 
                    id="schedule-time" 
                    type="time" 
                    value={scheduleOptions.time}
                    onChange={(e) => setScheduleOptions({...scheduleOptions, time: e.target.value})}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="schedule-recipients">Destinatários (e-mails)</Label>
                  <Input 
                    id="schedule-recipients" 
                    placeholder="exemplo@email.com, outro@email.com" 
                    value={scheduleOptions.recipients}
                    onChange={(e) => setScheduleOptions({...scheduleOptions, recipients: e.target.value})}
                  />
                  <p className="text-xs text-muted-foreground">
                    Separe múltiplos e-mails por vírgula.
                  </p>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="schedule-format">Formato</Label>
                  <Select 
                    value={scheduleOptions.format} 
                    onValueChange={(val) => setScheduleOptions({...scheduleOptions, format: val})}
                  >
                    <SelectTrigger id="schedule-format">
                      <SelectValue placeholder="Selecione o formato" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="pdf">PDF</SelectItem>
                      <SelectItem value="excel">Excel</SelectItem>
                      <SelectItem value="csv">CSV</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setShowExportModal(false)}>
                  Cancelar
                </Button>
                <Button onClick={scheduleReport}>
                  Agendar Envio
                </Button>
              </DialogFooter>
            </TabsContent>
            
            <TabsContent value="share" className="space-y-4 mt-4">
              <div className="space-y-4">
                <p className="text-center py-2">
                  Compartilhe este relatório por:
                </p>
                
                <div className="grid grid-cols-3 gap-4">
                  <Button 
                    className="flex flex-col items-center p-6" 
                    variant="outline"
                    onClick={() => shareReport("email")}
                  >
                    <Mail className="h-8 w-8 mb-2" />
                    <span>E-mail</span>
                  </Button>
                  
                  <Button 
                    className="flex flex-col items-center p-6" 
                    variant="outline"
                    onClick={() => shareReport("whatsapp")}
                  >
                    <Share className="h-8 w-8 mb-2" />
                    <span>WhatsApp</span>
                  </Button>
                  
                  <Button 
                    className="flex flex-col items-center p-6" 
                    variant="outline"
                    onClick={() => shareReport("copy")}
                  >
                    <Copy className="h-8 w-8 mb-2" />
                    <span>Copiar Link</span>
                  </Button>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>
      
      {/* Modal para configuração de metas */}
      <Dialog open={showGoalsModal} onOpenChange={setShowGoalsModal}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Definir Metas de Desempenho</DialogTitle>
            <DialogDescription>
              Configure metas para acompanhar o desempenho do seu salão.
            </DialogDescription>
          </DialogHeader>
          
          <Tabs defaultValue="new" className="mt-4">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="new">Nova Meta</TabsTrigger>
              <TabsTrigger value="existing">Metas Atuais</TabsTrigger>
            </TabsList>
            
            <TabsContent value="new" className="space-y-4 mt-4">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="goal-name">Nome da Meta</Label>
                  <Input 
                    id="goal-name" 
                    placeholder="Ex: Faturamento Mensal" 
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-2 mt-2">
                  <div>
                    <Label htmlFor="goal-target">Valor Alvo</Label>
                    <Input 
                      id="goal-target" 
                      type="number" 
                      placeholder="Ex: 10000" 
                    />
                  </div>
                  <div>
                    <Label htmlFor="goal-unit">Unidade</Label>
                    <Select>
                      <SelectTrigger id="goal-unit">
                        <SelectValue placeholder="Escolha a unidade" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="currency">R$ (Valor)</SelectItem>
                        <SelectItem value="units">Unidades</SelectItem>
                        <SelectItem value="percentage">Porcentagem (%)</SelectItem>
                        <SelectItem value="clients">Clientes</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="mt-2">
                  <Label htmlFor="goal-period">Período</Label>
                  <Select>
                    <SelectTrigger id="goal-period">
                      <SelectValue placeholder="Escolha o período" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="daily">Diário</SelectItem>
                      <SelectItem value="weekly">Semanal</SelectItem>
                      <SelectItem value="monthly">Mensal</SelectItem>
                      <SelectItem value="quarterly">Trimestral</SelectItem>
                      <SelectItem value="yearly">Anual</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="pt-4">
                  <p className="text-sm text-muted-foreground mb-2">
                    Será salvo o tipo de relatório atual, período e filtros selecionados.
                  </p>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setShowGoalsModal(false)}>Cancelar</Button>
                <Button onClick={() => {
                  // Coleta de valores dos campos
                  const name = (document.getElementById("goal-name") as HTMLInputElement).value;
                  const target = parseFloat((document.getElementById("goal-target") as HTMLInputElement).value);
                  
                  // Simples validação
                  if (!name || isNaN(target)) {
                    toast({
                      title: "Erro ao salvar meta",
                      description: "Preencha todos os campos corretamente"
                    });
                    return;
                  }
                  
                  // Salvamento da meta
                  saveGoal({
                    name,
                    target,
                    current: 0,
                    unit: "currency",
                    period: "monthly"
                  });
                }}>Salvar Meta</Button>
              </DialogFooter>
            </TabsContent>
            
            <TabsContent value="existing" className="mt-4">
              {goals.length > 0 ? (
                <div className="space-y-4">
                  {goals.map(goal => (
                    <div key={goal.id} className="flex items-center justify-between p-3 border rounded-md">
                      <div>
                        <p className="font-medium">{goal.name}</p>
                        <p className="text-xs text-muted-foreground">
                          Gerado em {format(goal.generatedAt, "dd/MM/yyyy")}
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" onClick={() => {
                          // Adicionar opção para salvar como template
                          setTemplateDescription(`Baseado no relatório de ${format(goal.generatedAt, "dd/MM/yyyy")}`);
                          setShowHistoryModal(false);
                          setShowTemplateModal(true);
                        }}>
                          <Save className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="py-8 text-center">
                  <p className="text-muted-foreground">Nenhuma meta configurada.</p>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>
      
      {/* Modal de Pré-visualização */}
      <Dialog open={previewMode} onOpenChange={closePreview}>
        <DialogContent className="sm:max-w-[90%] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Pré-visualização do Relatório</DialogTitle>
            <DialogDescription>
              Visualize como seu relatório ficará antes de exportar ou compartilhar.
            </DialogDescription>
          </DialogHeader>
          
          <div className="mt-4 space-y-8">
            {isLoading ? (
              <div className="py-20 text-center">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                <p className="mt-4 text-muted-foreground">Carregando pré-visualização...</p>
              </div>
            ) : previewData ? (
              <>
                <div className="text-center py-4 border-b">
                  <h1 className="text-2xl font-bold mb-2">
                    {viewMode === "dashboard" ? "Relatório Padrão" : "Relatório Personalizado"}
                  </h1>
                  <p className="text-muted-foreground">
                    Período: {format(new Date(selectedFilters.dataInicio), "dd/MM/yyyy")} a {format(new Date(selectedFilters.dataFim), "dd/MM/yyyy")}
                  </p>
                </div>
                
                {viewMode === "dashboard" ? (
                  <div className="space-y-8">
                    <div>
                      <h2 className="text-xl font-semibold mb-4">Financeiro</h2>
                      <div className="bg-gray-50 p-6 rounded-lg">
                        <div className="h-64">
                          <ResponsiveContainer width="100%" height="100%">
                            <BarChart data={previewData.salesData}>
                              <CartesianGrid strokeDasharray="3 3" />
                              <XAxis dataKey="date" />
                              <YAxis />
                              <Tooltip />
                              <Legend />
                              <Bar dataKey="revenue" fill={chartTheme.tertiary} name="Receitas" />
                              <Bar dataKey="expenses" fill={chartTheme.primary} name="Despesas" />
                            </BarChart>
                          </ResponsiveContainer>
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <h2 className="text-xl font-semibold mb-4">Atendimentos</h2>
                      <div className="grid gap-4 md:grid-cols-2">
                        <div className="bg-gray-50 p-6 rounded-lg">
                          <h3 className="text-lg font-medium mb-4">Taxa de Ocupação</h3>
                          <div className="h-56">
                            <ResponsiveContainer width="100%" height="100%">
                              <BarChart data={previewData.appointmentsData.occupationRate}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="professional" />
                                <YAxis unit="%" />
                                <Tooltip />
                                <Legend />
                                <Bar dataKey="rate" fill={chartTheme.primary} name="Taxa de Ocupação" />
                              </BarChart>
                            </ResponsiveContainer>
                          </div>
                        </div>
                        
                        <div className="bg-gray-50 p-6 rounded-lg">
                          <h3 className="text-lg font-medium mb-4">Duração Média dos Serviços</h3>
                          <div className="h-56">
                            <ResponsiveContainer width="100%" height="100%">
                              <BarChart data={previewData.appointmentsData.servicesDuration}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="service" />
                                <YAxis unit="min" />
                                <Tooltip />
                                <Legend />
                                <Bar dataKey="avgDuration" fill={chartTheme.secondary} name="Duração Média" />
                              </BarChart>
                            </ResponsiveContainer>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  // Conteúdo do relatório personalizado
                  <div>
                    {renderCustomReportContent(previewData, customReportOptions)}
                  </div>
                )}
              </>
            ) : (
              <div className="py-10 text-center">
                <p className="text-muted-foreground">Nenhum dado para pré-visualização.</p>
              </div>
            )}
          </div>
          
          <DialogFooter className="mt-6">
            <Button variant="outline" onClick={closePreview}>
              Fechar
            </Button>
            <Button onClick={() => {
              closePreview();
              setShowExportModal(true);
            }}>
              Exportar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Modal para salvar/gerenciar templates */}
      <Dialog open={showTemplateModal} onOpenChange={setShowTemplateModal}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Gerenciar Templates</DialogTitle>
            <DialogDescription>
              Salve configurações de relatórios para uso futuro ou gerencie os templates existentes.
            </DialogDescription>
          </DialogHeader>
          
          <Tabs defaultValue="save" className="mt-4">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="save">Salvar Novo</TabsTrigger>
              <TabsTrigger value="manage">Gerenciar Existentes</TabsTrigger>
            </TabsList>
            
            <TabsContent value="save" className="space-y-4 mt-4">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="template-name">Nome do Template</Label>
                  <Input 
                    id="template-name" 
                    placeholder="Ex: Relatório Mensal de Vendas" 
                    value={templateName}
                    onChange={(e) => setTemplateName(e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="template-desc">Descrição (opcional)</Label>
                  <Input 
                    id="template-desc" 
                    placeholder="Descreva o propósito deste template" 
                    value={templateDescription}
                    onChange={(e) => setTemplateDescription(e.target.value)}
                  />
                </div>
                <div className="pt-4">
                  <p className="text-sm text-muted-foreground mb-2">
                    Será salvo o tipo de relatório atual, período e filtros selecionados.
                  </p>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setShowTemplateModal(false)}>Cancelar</Button>
                <Button onClick={saveAsTemplate}>Salvar Template</Button>
              </DialogFooter>
            </TabsContent>
            
            <TabsContent value="manage" className="mt-4">
              {templates.length > 0 ? (
                <div className="space-y-4">
                  {templates.map(template => (
                    <div key={template.id} className="flex items-center justify-between p-3 border rounded-md">
                      <div>
                        <p className="font-medium">{template.name}</p>
                        <p className="text-sm text-muted-foreground">{template.description}</p>
                        <p className="text-xs text-muted-foreground">
                          Criado em {format(template.createdAt, "dd/MM/yyyy")}
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" onClick={() => {
                          loadTemplate(template);
                          setShowTemplateModal(false);
                        }}>
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => toggleFavorite(template.id)}
                        >
                          <Heart className={`h-4 w-4 ${favorites.includes(template.id) ? 'fill-red-500 text-red-500' : 'text-gray-400'}`} />
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => deleteTemplate(template.id)}
                        >
                          <AlertTriangle className="h-4 w-4 text-red-500" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="py-8 text-center">
                  <p className="text-muted-foreground">Nenhum template salvo ainda.</p>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>
      
      {/* Modal de Comparação de Períodos */}
      <Dialog open={showComparisonModal} onOpenChange={setShowComparisonModal}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Comparação de Períodos</DialogTitle>
            <DialogDescription>
              Compare o desempenho do seu salão entre dois períodos diferentes.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6 mt-4">
            <div className="grid grid-cols-2 gap-6">
              <div className="space-y-4">
                <h3 className="text-sm font-medium border-b pb-2">Período Base (Atual)</h3>
                <div className="space-y-2">
                  <Label htmlFor="base-start">Data Inicial</Label>
                  <Input 
                    id="base-start" 
                    type="date" 
                    value={comparisonOptions.basePeriod.start}
                    onChange={(e) => setComparisonOptions({
                      ...comparisonOptions, 
                      basePeriod: {
                        ...comparisonOptions.basePeriod,
                        start: e.target.value,
                        label: "Período Atual"
                      }
                    })}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="base-end">Data Final</Label>
                  <Input 
                    id="base-end" 
                    type="date" 
                    value={comparisonOptions.basePeriod.end}
                    onChange={(e) => setComparisonOptions({
                      ...comparisonOptions, 
                      basePeriod: {
                        ...comparisonOptions.basePeriod,
                        end: e.target.value,
                        label: "Período Atual"
                      }
                    })}
                  />
                </div>
                <div className="flex flex-wrap gap-2 mt-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setComparisonOptions({
                      ...comparisonOptions,
                      basePeriod: {
                        start: format(sub(new Date(), { days: 30 }), "yyyy-MM-dd"),
                        end: format(new Date(), "yyyy-MM-dd"),
                        label: "Último Mês"
                      }
                    })}
                  >
                    Último Mês
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setComparisonOptions({
                      ...comparisonOptions,
                      basePeriod: {
                        start: format(startOfMonth(new Date()), "yyyy-MM-dd"),
                        end: format(endOfMonth(new Date()), "yyyy-MM-dd"),
                        label: "Mês Atual"
                      }
                    })}
                  >
                    Mês Atual
                  </Button>
                </div>
              </div>
              
              <div className="space-y-4">
                <h3 className="text-sm font-medium border-b pb-2">Período de Comparação</h3>
                <div className="space-y-2">
                  <Label htmlFor="comp-start">Data Inicial</Label>
                  <Input 
                    id="comp-start" 
                    type="date" 
                    value={comparisonOptions.comparisonPeriod.start}
                    onChange={(e) => setComparisonOptions({
                      ...comparisonOptions, 
                      comparisonPeriod: {
                        ...comparisonOptions.comparisonPeriod,
                        start: e.target.value,
                        label: "Mês Anterior"
                      }
                    })}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="comp-end">Data Final</Label>
                  <Input 
                    id="comp-end" 
                    type="date" 
                    value={comparisonOptions.comparisonPeriod.end}
                    onChange={(e) => setComparisonOptions({
                      ...comparisonOptions, 
                      comparisonPeriod: {
                        ...comparisonOptions.comparisonPeriod,
                        end: e.target.value,
                        label: "Mês Anterior"
                      }
                    })}
                  />
                </div>
                <div className="flex flex-wrap gap-2 mt-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setComparisonOptions({
                      ...comparisonOptions,
                      comparisonPeriod: {
                        start: format(sub(new Date(), { days: 60 }), "yyyy-MM-dd"),
                        end: format(sub(new Date(), { days: 31 }), "yyyy-MM-dd"),
                        label: "Mês Anterior"
                      }
                    })}
                  >
                    Mês Anterior
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setComparisonOptions({
                      ...comparisonOptions,
                      comparisonPeriod: {
                        start: format(sub(new Date(), { years: 1, months: 1 }), "yyyy-MM-dd"),
                        end: format(sub(new Date(), { years: 1 }), "yyyy-MM-dd"),
                        label: "Mesmo Período Ano Passado"
                      }
                    })}
                  >
                    Mesmo Período Ano Passado
                  </Button>
                </div>
              </div>
            </div>
            
            <div className="space-y-4 pt-4">
              <div className="space-y-2">
                <Label>Selecione os relatórios para comparar</Label>
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="comp-financeiro" 
                      checked={comparisonOptions.sections.financeiro}
                      onCheckedChange={(checked) => setComparisonOptions({
                        ...comparisonOptions, 
                        sections: {
                          ...comparisonOptions.sections,
                          financeiro: !!checked
                        }
                      })}
                    />
                    <Label htmlFor="comp-financeiro">Financeiro</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="comp-atendimentos" 
                      checked={comparisonOptions.sections.atendimentos}
                      onCheckedChange={(checked) => setComparisonOptions({
                        ...comparisonOptions, 
                        sections: {
                          ...comparisonOptions.sections,
                          atendimentos: !!checked
                        }
                      })}
                    />
                    <Label htmlFor="comp-atendimentos">Atendimentos</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="comp-clientes" 
                      checked={comparisonOptions.sections.clientes}
                      onCheckedChange={(checked) => setComparisonOptions({
                        ...comparisonOptions, 
                        sections: {
                          ...comparisonOptions.sections,
                          clientes: !!checked
                        }
                      })}
                    />
                    <Label htmlFor="comp-clientes">Clientes</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="comp-produtos" 
                      checked={comparisonOptions.sections.produtos}
                      onCheckedChange={(checked) => setComparisonOptions({
                        ...comparisonOptions, 
                        sections: {
                          ...comparisonOptions.sections,
                          produtos: !!checked
                        }
                      })}
                    />
                    <Label htmlFor="comp-produtos">Produtos</Label>
                  </div>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="comp-display">Exibição da Comparação</Label>
                <Select 
                  value={comparisonOptions.displayType} 
                  onValueChange={(val) => setComparisonOptions({
                    ...comparisonOptions, 
                    displayType: val
                  })}
                >
                  <SelectTrigger id="comp-display">
                    <SelectValue placeholder="Selecione o tipo de exibição" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="side-by-side">Lado a lado</SelectItem>
                    <SelectItem value="overlay">Sobrepostos</SelectItem>
                    <SelectItem value="diff">Diferença (valores e percentuais)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
          
          <DialogFooter className="mt-6">
            <Button variant="outline" onClick={() => setShowComparisonModal(false)}>Cancelar</Button>
            <Button onClick={() => {
              compareReports();
              setShowComparisonModal(false);
              // Mostrar pré-visualização após a comparação
              generatePreview();
            }}>
              Comparar Períodos
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Modal para histórico de relatórios */}
      <Dialog open={showHistoryModal} onOpenChange={setShowHistoryModal}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Histórico de Relatórios</DialogTitle>
            <DialogDescription>
              Relatórios que você gerou recentemente. Clique em um para visualizá-lo novamente.
            </DialogDescription>
          </DialogHeader>
          
          <div className="mt-4 max-h-[400px] overflow-y-auto">
            {history.length > 0 ? (
              <div className="space-y-4">
                {history.map(historyItem => (
                  <div key={historyItem.id} className="flex items-center justify-between p-3 border rounded-md">
                    <div>
                      <p className="font-medium">{historyItem.name}</p>
                      <p className="text-xs text-muted-foreground">
                        Gerado em {format(historyItem.generatedAt, "dd/MM/yyyy HH:mm")}
                      </p>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm" onClick={() => {
                        loadFromHistory(historyItem);
                        setShowHistoryModal(false);
                      }}>
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => {
                          // Adicionar opção para salvar como template
                          setTemplateDescription(`Baseado no relatório de ${format(historyItem.generatedAt, "dd/MM/yyyy")}`);
                          setShowHistoryModal(false);
                          setShowTemplateModal(true);
                        }}
                      >
                        <Save className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="py-8 text-center">
                <p className="text-muted-foreground">Nenhum relatório no histórico</p>
                <p className="text-sm text-muted-foreground mt-2">
                  Gere relatórios para visualizá-los aqui posteriormente
                </p>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
      
      {/* Modal para personalização de tema */}
      <Dialog open={showThemeModal} onOpenChange={setShowThemeModal}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Personalizar Tema</DialogTitle>
            <DialogDescription>
              Altere as cores dos gráficos e visualizações para personalizar seus relatórios.
            </DialogDescription>
          </DialogHeader>
          
          <div className="py-4">
            <div className="space-y-4">
              <div>
                <Label htmlFor="primary-color">Cor Primária</Label>
                <div className="flex items-center gap-2 mt-2">
                  <input 
                    type="color" 
                    id="primary-color" 
                    value={chartTheme.primary}
                    onChange={(e) => updateChartTheme({primary: e.target.value})}
                    className="w-10 h-10 rounded cursor-pointer"
                  />
                  <Input 
                    value={chartTheme.primary} 
                    onChange={(e) => updateChartTheme({primary: e.target.value})}
                    className="font-mono"
                  />
                </div>
              </div>
              
              <div>
                <Label htmlFor="secondary-color">Cor Secundária</Label>
                <div className="flex items-center gap-2 mt-2">
                  <input 
                    type="color" 
                    id="secondary-color" 
                    value={chartTheme.secondary}
                    onChange={(e) => updateChartTheme({secondary: e.target.value})}
                    className="w-10 h-10 rounded cursor-pointer"
                  />
                  <Input 
                    value={chartTheme.secondary} 
                    onChange={(e) => updateChartTheme({secondary: e.target.value})}
                    className="font-mono"
                  />
                </div>
              </div>
              
              <div>
                <Label htmlFor="tertiary-color">Cor Terciária</Label>
                <div className="flex items-center gap-2 mt-2">
                  <input 
                    type="color" 
                    id="tertiary-color" 
                    value={chartTheme.tertiary}
                    onChange={(e) => updateChartTheme({tertiary: e.target.value})}
                    className="w-10 h-10 rounded cursor-pointer"
                  />
                  <Input 
                    value={chartTheme.tertiary} 
                    onChange={(e) => updateChartTheme({tertiary: e.target.value})}
                    className="font-mono"
                  />
                </div>
              </div>
              
              <div>
                <Label htmlFor="quaternary-color">Cor Quaternária</Label>
                <div className="flex items-center gap-2 mt-2">
                  <input 
                    type="color" 
                    id="quaternary-color" 
                    value={chartTheme.quaternary}
                    onChange={(e) => updateChartTheme({quaternary: e.target.value})}
                    className="w-10 h-10 rounded cursor-pointer"
                  />
                  <Input 
                    value={chartTheme.quaternary} 
                    onChange={(e) => updateChartTheme({quaternary: e.target.value})}
                    className="font-mono"
                  />
                </div>
              </div>
              
              <div className="space-y-2 pt-4">
                <p className="text-sm font-medium">Pré-visualização</p>
                <div className="h-32 bg-gray-100 rounded-md p-2">
                  <div className="flex h-full justify-around items-end">
                    <div style={{height: '60%', width: '30px', backgroundColor: chartTheme.primary}} className="rounded-t"></div>
                    <div style={{height: '80%', width: '30px', backgroundColor: chartTheme.secondary}} className="rounded-t"></div>
                    <div style={{height: '45%', width: '30px', backgroundColor: chartTheme.tertiary}} className="rounded-t"></div>
                    <div style={{height: '70%', width: '30px', backgroundColor: chartTheme.quaternary}} className="rounded-t"></div>
                  </div>
                </div>
              </div>
            </div>
            
            <DialogFooter className="mt-6">
              <Button variant="outline" onClick={() => setShowThemeModal(false)}>Cancelar</Button>
              <Button onClick={() => setShowThemeModal(false)}>Aplicar Tema</Button>
            </DialogFooter>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
